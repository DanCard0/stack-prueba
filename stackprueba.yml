AWSTemplateFormatVersion: '2010-09-09'

Description: AWS API Gateway with a Lambda Integration

Parameters:
###################### GENERAL TAGS ######################
  project:
    Description: Nombre del proyecto.
    Type: String
  environment:
    Description: Ambiente donde se despliega.
    Type: String
  applicationcode:
    Description: Codigo AW de la aplicacion
    Type: String

Resources:
########## Creacion de la API y el Resource principal ###############
  BankAgregationApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      ApiKeySourceType: HEADER
      Description: An API Gateway to manage Bank Agregation Lambdas
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: 
        Fn::Sub: ${applicationcode}-${project}-${environment}-Bank-Agregation

  Lifecoach:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: BankAgregationApi
      ParentId:
        Fn::GetAtt:
        - BankAgregationApi
        - RootResourceId
      PathPart: lifecoach

  v1:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: BankAgregationApi
      ParentId:
        Ref: Lifecoach
      PathPart: v1
      
  BankAggregation:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: BankAgregationApi
      ParentId:
        Ref: v1
      PathPart: bankAggregation


####################### lambda send credentials  ##############################################

  Credentials:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: BankAgregationApi
      ParentId:
        Ref: BankAggregation
      PathPart: credentials

  PostAddCredentialsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt BankAgregationApiIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddBankLambdaFunction.Arn}/invocations'
      OperationName: 'postCredentials'
      ResourceId: !Ref Credentials
      RestApiId: !Ref BankAgregationApi

  BankAgregationApiIamRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary: !Sub arn:aws:iam::${AWS::AccountId}:policy/Lz-Governance-Boundary
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: LambdaAddBankAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource: !GetAtt AddBankLambdaFunction.Arn
        - PolicyName: LambdaGetPublicKeyAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource: !GetAtt GetPublicKeyLambdaFunction.Arn

  AddBankLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          exports.handler = async (event, context) => {
            return {
              statusCode: 200,
              headers: { 'content-type': 'text/plain' },
              body: 'ok',
            };
          };
      Description: AWS Lambda function
      FunctionName: 
        Fn::Sub: ${applicationcode}-${project}-${environment}-lambda-aggregate-bank
      Handler: app.aggregate-bank
      MemorySize: 256
      Role: !GetAtt LambdaIamRole.Arn
      Runtime: nodejs12.x
      Timeout: 60

  LambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary: !Sub arn:aws:iam::${AWS::AccountId}:policy/Lz-Governance-Boundary
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'

######################## Lambda Get Public Key #######################################
  GetPublicKeyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt BankAgregationApiIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetPublicKeyLambdaFunction.Arn}/invocations'
      OperationName: 'getPublicKey'
      ResourceId: !Ref Credentials
      RestApiId: !Ref BankAgregationApi


  GetPublicKeyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          exports.handler = async (event, context) => {
            return {
              statusCode: 200,
              headers: { 'content-type': 'text/plain' },
              body: 'ok',
            };
          };
      Description: AWS Lambda function
      FunctionName: 
        Fn::Sub: ${applicationcode}-${project}-${environment}-lambda-get-public-key
      Handler: app.getPublicKey
      MemorySize: 256
      Role: !GetAtt LambdaIamRole.Arn
      Runtime: nodejs12.x
      Timeout: 60
     

######################### API MAESTRO DE BANCOS ######################################
  ApiGatewayResourceMaster:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: BankAgregationApi
      ParentId:
        Ref: BankAggregation
      PathPart: Master

  ApiGatewayMethodMaster:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt ApiGatewayIamRoleMaster.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaAggregateBankMaster.Arn}/invocations'
      OperationName:
        Fn::Sub: ${applicationcode}-${project}-${environment}-apigateway-bank-master
      ResourceId: !Ref ApiGatewayResourceMaster
      RestApiId: !Ref BankAgregationApi

  ApiGatewayDeploymentMaster:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGatewayMethodMaster
    Properties:
      Description: Lambda API Deployment
      RestApiId: !Ref BankAgregationApi

  ApiGatewayIamRoleMaster:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary: !Sub arn:aws:iam::${AWS::AccountId}:policy/Lz-Governance-Boundary
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource: !GetAtt LambdaAggregateBankMaster.Arn

  LambdaAggregateBankMaster:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          exports.handler = async (event, context) => {
            return {
              statusCode: 200,
              headers: { 'content-type': 'text/plain' },
              body: 'ok',
            };
          };
      Description: AWS Lambda function
      FunctionName:
        Fn::Sub: ${applicationcode}-${project}-${environment}-lambda-aggregate-bank-master
      Handler: index.handler ##dist/app.lambdaHandler
      MemorySize: 256
      Role: !GetAtt LambdaIamRoleMaster.Arn
      Runtime: nodejs12.x
      Timeout: 60
     
  LambdaIamRoleMaster:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary: !Sub arn:aws:iam::${AWS::AccountId}:policy/Lz-Governance-Boundary
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'

###################### LAMBDA WEBHOOK ACCOUNTS ######################
  ApiGatewayResourceWebhookAccounts:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: BankAgregationApi
      ParentId:
        Ref: BankAggregation
      PathPart: WebhookAccounts

  ApiGatewayMethodWebhookAccounts:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt ApiGatewayIamRoleWebhookAccounts.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaWebhookAccounts.Arn}/invocations'
      OperationName:
        Fn::Sub: ${applicationcode}-${project}-${environment}-apigateway-webhook-accounts
      ResourceId: !Ref ApiGatewayResourceWebhookAccounts
      RestApiId: !Ref BankAgregationApi

  ApiGatewayDeploymentWebhookAccounts:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGatewayMethodWebhookAccounts
    Properties:
      Description: Lambda API Deployment
      RestApiId: !Ref BankAgregationApi

  ApiGatewayIamRoleWebhookAccounts:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary: !Sub arn:aws:iam::${AWS::AccountId}:policy/Lz-Governance-Boundary
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource: !GetAtt LambdaWebhookAccounts.Arn
  
  LambdaWebhookAccounts:
    Type: AWS::Lambda::Function
    Properties:
      Description: Funcion para recibir informacion productos Finerio
      Code:
        ZipFile: !Sub |
          'use strict';
          exports.handler = (event, context, callback) => {
            console.log('Lambda webhook accounts')
          };
      FunctionName:
        Fn::Sub: ${applicationcode}-${project}-${environment}-lambda-webhook-accounts
      Handler: dist/app.lambdaHandler
      MemorySize: 256
      Role: !GetAtt LambdaIamRoleWebhookAccounts.Arn
      Runtime: nodejs12.x
      Timeout: 60
    # DependsOn:
    #   - ApiGatewayWebhookAccounts
    #   - BucketWebhookAccounts

  LambdaIamRoleWebhookAccounts:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary: !Sub arn:aws:iam::${AWS::AccountId}:policy/Lz-Governance-Boundary
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'

  BucketWebhookAccounts:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: 
        Fn::Sub: ${applicationcode}-${project}-${environment}-bucket-webhook-accounts
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
   
  PermissionWebhookAccountsBucket:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt: LambdaWebhookAccounts.Arn
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub arn:aws:s3:::${BucketWebhookAccounts}
  
  PolicyBucketWebhookAccounts:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: BucketWbhookAccountsAccessLC
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:DeleteObject
            Resource: !Sub 'arn:aws:s3:::${BucketWebhookAccounts}/*'
      Roles:
        - Ref: LambdaIamRoleWebhookAccounts

#########################API RESPONSE AND DEPLOY STAGE ######
  GatewayResponse:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'POST,GET,OPTIONS'"
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
      ResponseTemplates:
        application/json: '{"message": $context.authorizer.message}'
      ResponseType: DEFAULT_4XX
      RestApiId:
        Ref: BankAgregationApi
      StatusCode: '403'

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: 
      - ApiGatewayMethodMaster
      - PostAddCredentialsMethod
      - GetPublicKeyMethod
     #- ApiGatewayMethodMaster
     #- ApiGatewayMethodWebhookAccounts
    Properties:
      Description: Lambda API Deployment
      RestApiId: !Ref BankAgregationApi
      StageName: 'dev'